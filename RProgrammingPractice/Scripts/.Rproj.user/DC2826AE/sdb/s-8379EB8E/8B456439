{
    "collab_server" : "",
    "contents" : "\n\nlibrary(\"xlsx\")\nlibrary(\"foreign\")\nlibrary(\"foreach\")\nlibrary(\"googleVis\")\nlibrary(\"reshape\")\nlibrary(\"XML\")\nlibrary(\"parallel\")\n\n\n#ncore = multicore:::detectCores()\n#creating dataframes\ndata <- data.frame(Day=c(1,2,3), Name = c(\"Monday\",\"Tuesday\",\"Wednesday\"), \nActivity=c(\"dancing\",\"singing\",\"walking\"))\n\n#Exporting data\nwrite.table(data, file = \"dat.csv\", sep = \",\")\nsome.data <- read.csv(\"dat.csv\", header = TRUE, stringsAsFactors = TRUE)\nsome.data\nstr(some.data)\n#subsetting dataframes\nsubset(data, activity==\"dancing\") \n\n#importing text files\n\nURL <- \"http://www.stanford.edu/~druau/pivot_table.csv\"\npivot <- read.table(URL, sep=',', header = TRUE)\nhead(pivot, n=3)\n\n\n\n#excel files\n??read.xlsx\n\n\n#XML/HTML (comes from the XML package)\neq <- readHTMLTable(\"http://www.iris.edu/seismon/last30.html\")\n\n#for more information\nhelp.start()\n\n#subsetting:\n#with subset\ndim(iris)\ndim(subset(iris, Species==\"setosa\"))\ndim(subset(iris, Species==\"versicolor\"))\ndim(subset(iris, Species==\"virginica\"))\n\n\nunique(iris$Species) #find the species with unique names\n\n#with sql\ninstall.packages(\"sqldf\", dependencies = TRUE)\nlibrary(\"sqldf\")\n\n#with doBy\ninstall.packages(\"doBy\")\nlibrary(\"doBy\")\nhead(iris)\n#example with doBy. Find the means and sd of the iris data according to species\n# with columns of sepal.Width, etc\n\nsummaryBy(Sepal.Length+Sepal.Width+Petal.Length+Petal.Width ~ Species, data = iris, FUNC =c(mean,sd))\n##############################################################\n#manipulating CSV files\ndem.stats.dat <- read.csv(\"Demographic_Statistics_By_Zip_Code.csv\", header = TRUE)\nhead(dat, n=3)\nnames(dat) #view the column names\n\n#data on gdrive\nsURl <- \"https://drive.google.com/drive/folders/0B0f8ij3hy-OFb294MTZtYzFwWDg\"\nlibrary(\"RCurl\")\nx <- curl(sURl)\ncrimes12_15<- read.csv(x, header = TRUE)\nhead(crimes12_15, n=3)\nnames(crimes12_15.dat)\nlength(names(crimes12_15.dat))==ncol(crimes12_15.dat) #check if the number of column names corresponds to the number of columns\ndim(crimes12_15.dat) #check the dimensions of the data\n\ncons.complaints.dat <- read.csv(\"Consumer_Complaints.csv\", header = TRUE)\nhead(cons.complaints.dat, n=3)\nnames(cons.complaints.dat)\nlength(names(cons.complaints.dat))==ncol(cons.complaints.dat)\ndim(cons.complaints.dat)\n\n\n#DPLYR\nlibrary(\"dplyr\")\nCrimes <- read.csv(\"Crimes_2012-2015.csv\", header = TRUE)\nprint(Crimes)\nDate.Occured <- group_by(Crimes, DATE.OCC)\n?count\ncounts <- summarise(Date.Occured, n=n(), sort=TRUE)\nhead(counts, 10)\n\n\ndat <- read.csv(\"meas.csv\", header = TRUE)\nprint(dat)\n\n\n#magrittr package\n#generic methods\nx<- 1:11\nsqrt(x)\nsum(sqrt(x))\n\n#using pipes\nx <- 1:11\nx %>% sqrt() %>% sum() #take x, find the square root nof x and pass the\n#output to the sum function\n\ndat <- iris\n\ndat %>% subset(dat$Species==\"setosa\") %>% tail()\n\n#googleVis\nlibrary(\"googleVis\")\ndat <- iris\n\npar(mfrow=c(2,1))\nfor(i in 1:2){\ndat%>%subset(Sepal.Width>i, select=c(Species,Sepal.Length))%>%plot(main=\"adasdasd\")\n}\n\n#measles\n\ndir <- getwd()\nsetwd(dir)\nlibrary(\"gdata\")\nmeasles.dat <- read.xls(\"60measles.xls\", sheetName = \"60measles\")\ncities <- read.xlsx(\"60measles.xls\", sheetName = \"60cities\")\n\nhead(measles.dat)\n\n\n#more on dplyr\ndat <- mtcars\nhead(dat)\n#dplyr functions\ncolnames(dat)\nrownames(dat)\n\n#change some column names the old way\ncolnames(dat)[1] <- \"Miles_Per_Gallon\"\n\n\n#Now, using dplyr\nlibrary(\"dplyr\")\n#first reset the name to the original\n\ncolnames(dat)[1] <- \"mpg\"\n\n#1. with dplyr, we use the function (?rename)\ndat <- rename(dat, Miles_per_Gallon=mpg)\n#you can rename multiple columns at a time\ndat <- rename(dat, Miles_per_Gallon = mpg, Cylinder = cyl)\n\n# 2. ?filter for subsetting rows\ndat_mpg_over_20 <- filter(mtcars,mpg>20 )\nhead(dat_mpg_over_20)\n#filter() does not keep the rownames. One way to cater for that\n#is to copy over the data and assign the rownames as a new column\n\nmt <- mtcars\nmt$Cars <- rownames(mtcars)\n\n#AND operator\nmt_mpg_over_20_and_cyl_equal_6 <- filter(mt, mpg>20, cyl==6) #automatically joins them with an AND oprator\nhead(mt_mpg_over_20_and_cyl_equal_6)\n\n#OR operator\nmt_mpg_over_20_or_cyl_equal_6 <- filter(mt, mpg>20, cyl==6) #automatically joins them with an AND oprator\nhead(mt_mpg_over_20_or_cyl_equal_6, n=10)\n\n#3. ?slice() grab objects by their ROW position\nslice.example <- slice(mtcars, 1:5)\nhead(slice.example)\n\n#4. sort ROWS with ?arrange() by columns.\n\nmt_mpg_sort <- arrange(mt,cyl,desc(mpg))\n#this example means \"arrange mtcars by cylinder and mpg in\n#descending order\"\nhead(mt_mpg_sort)\n\n\n#5. subset with select()\n\nmt.carb.mpg <- select(mt, carb,mpg)\nmt$Cars <- rownames(mt)\n\n\n#select() can be used to grab columns with partially matched names\nmt4 <- select(mt, cyl,contains(\"p\"))\nView(mt4)\n#default subsetting in R\nmt.carb.mpg2 <- mt[,c(\"carb\",\"mpg\")]\nhead(mt.carb.mpg2)\narrange(mt.carb.mpg, mpg)\narrange(mt.carb.mpg, desc(mpg))\n\n\n#6. mutate() tables to get new columns\n\nmt <- mutate(mt, mpg.sq = mpg^2) #create a new column with mpg squared\nhead(mt)\n#standard procedure\n\nmt$mpg.sq2 <- mt$mpg^2 \nhead(mt)\n\n#more interesting will be for you to add more than one column\n\nmt2 <- mutate(mt, mpg.sq = mpg^2, cyl.sq = cyl^2)\nhead(mt2)\n\n#7. transmute() is used for transforming and mutating.\n#If you only want to keep the new variablesdata without \n#keeping the original, use transmute():\n# An example will suffice:\n\nmt_mut <- transmute(mt,mpg.sq = mpg^2, cyl.sq = cyl^2 )\nhead(mt_mut)\n\n\n#8. Summarise data with ?summarise()\n\nmt.summarised <- summarise(mt, mean.mpg = mean(mpg), max.cyl= max(cyl))\nmt.summarised \n\n\n#9. Group a table into various variables ?group_by()\n\nmt.by.cyl <- group_by(mt, cyl=n(),mpg=n)\nhead(mt.by.cyl)\nhead(mt) #compare with the original table\nprint(mt.by.cyl)\n\n\ndput(colnames(mt.by.cyl))\n",
    "created" : 1480932659208.000,
    "dirty" : true,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "505509003",
    "id" : "8B456439",
    "lastKnownWriteTime" : 1480933113,
    "last_content_update" : 1480933985461,
    "path" : "C:/Users/JAMESAZAM/GitRepositories/RProgrammingPractice/RProgrammingPractice/Scripts/RProgIntroStanford.R",
    "project_path" : "RProgIntroStanford.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}