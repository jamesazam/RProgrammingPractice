install.packages("RPostgreSQL")
library(RPostgreSQL)
dput(colnames(mt.by.cyl))
source('C:/Users/JAMESAZAM/GitRepositories/RProgrammingPractice/RProgrammingPractice/Scripts/RProgIntroStanford.R')
sURl <- "https://drive.google.com/drive/folders/0B0f8ij3hy-OFb294MTZtYzFwWDg"
library("curl")
x <- curl(sURl)
crimes12_15.dat <- read.csv(x, header = TRUE)
head(crimes12_15.dat, n=3)
library("Rcurl")
install.packages("Rcurl")
install.packages("RCurl")
library("RCurl")
x <- curl(sURl)
crimes12_15<- read.csv(x, header = TRUE)
head(crimes12_15, n=3)
dat <- iris
dat %>% subset(dat$Species=="setosa") %>% tail()
dat <- iris
dat %>% subset(dat$Species=="setosa") %>% tail()
dat <- iris
par(mfrow=c(2,1))
for(i in 1:2){
dat%>%subset(Sepal.Width>i, select=c(Species,Sepal.Length))%>%plot(main="adasdasd")
}
getwd()
library("gdata")
measles.dat <- read.xls("../Data/UKMeasles/60measles.xls", sheetName = "60measles")
cities <- read.xlsx("../Data/UKMeasles/
60measles.xls", sheetName = "60cities")
measles.dat <- read.xls("..\Data\UKMeasles\60measles.xls", sheetName = "60measles")
measles.dat <- read.xls("../Data/UKMeasles/60measles.xls", sheetName = "60measles")
dat <- mtcars
head(dat)
dput(colnames(dat))
dput(colnames(mt.by.cyl))
colnames(dat)[1] <- "Miles_Per_Gallon"
#Now, using dplyr
library("dplyr")
#first reset the name to the original
colnames(dat)[1] <- "mpg"
#1. with dplyr, we use the function (?rename)
dat <- rename(dat, Miles_per_Gallon=mpg)
#you can rename multiple columns at a time
dat <- rename(dat, Miles_per_Gallon = mpg, Cylinder = cyl)
# 2. ?filter for subsetting rows
dat_mpg_over_20 <- filter(mtcars,mpg>20 )
head(dat_mpg_over_20)
#filter() does not keep the rownames. One way to cater for that
#is to copy over the data and assign the rownames as a new column
mt <- mtcars
mt$Cars <- rownames(mtcars)
#AND operator
mt_mpg_over_20_and_cyl_equal_6 <- filter(mt, mpg>20, cyl==6) #automatically joins them with an AND oprator
head(mt_mpg_over_20_and_cyl_equal_6)
#OR operator
mt_mpg_over_20_or_cyl_equal_6 <- filter(mt, mpg>20, cyl==6) #automatically joins them with an AND oprator
head(mt_mpg_over_20_or_cyl_equal_6, n=10)
#3. ?slice() grab objects by their ROW position
slice.example <- slice(mtcars, 1:5)
head(slice.example)
#4. sort ROWS with ?arrange() by columns.
mt_mpg_sort <- arrange(mt,cyl,desc(mpg))
#this example means "arrange mtcars by cylinder and mpg in
#descending order"
head(mt_mpg_sort)
#5. subset with select()
mt.carb.mpg <- select(mt, carb,mpg)
mt$Cars <- rownames(mt)
#select() can be used to grab columns with partially matched names
mt4 <- select(mt, cyl,contains("p"))
View(mt4)
#default subsetting in R
mt.carb.mpg2 <- mt[,c("carb","mpg")]
head(mt.carb.mpg2)
arrange(mt.carb.mpg, mpg)
arrange(mt.carb.mpg, desc(mpg))
#6. mutate() tables to get new columns
mt <- mutate(mt, mpg.sq = mpg^2) #create a new column with mpg squared
head(mt)
#standard procedure
mt$mpg.sq2 <- mt$mpg^2
head(mt)
#more interesting will be for you to add more than one column
mt2 <- mutate(mt, mpg.sq = mpg^2, cyl.sq = cyl^2)
head(mt2)
#7. transmute() is used for transforming and mutating.
#If you only want to keep the new variablesdata without
#keeping the original, use transmute():
# An example will suffice:
mt_mut <- transmute(mt,mpg.sq = mpg^2, cyl.sq = cyl^2 )
head(mt_mut)
#8. Summarise data with ?summarise()
mt.summarised <- summarise(mt, mean.mpg = mean(mpg), max.cyl= max(cyl))
mt.summarised
#9. Group a table into various variables ?group_by()
mt.by.cyl <- group_by(mt, cyl=n(),mpg=n)
head(mt.by.cyl)
head(mt) #compare with the original table
print(mt.by.cyl)
dput(colnames(mt.by.cyl))
dput(colnames(mt.by.cyl))
mt <- mutate(mt, mpg.sq = mpg^2) #create a new column with mpg squared
head(mt)
mt$mpg.sq2 <- mt$mpg^2
head(mt)
mt2 <- mutate(mt, mpg.sq = mpg^2, cyl.sq = cyl^2)
mt_mut <- transmute(mt,mpg.sq = mpg^2, cyl.sq = cyl^2 )
mt.summarised <- summarise(mt, mean.mpg = mean(mpg), max.cyl= max(cyl))
mt.summarised
mt.by.cyl <- group_by(mt, cyl=n(),mpg=n)
mt.by.cyl <- group_by(mt, cyl=n())
head(mt.by.cyl)
mt.by.cyl
View(mt.by.cyl)
install
install.packages("listviewer")
?tibble
library("tidyverse")
if(!require("tidyverse")){
library("tidyverse")}
if(!require("tidyverse")){
library("tidyverse")}
require("tidyverse")
?any
checkpakages <- function(){
if(!require("tidyverse")){
install.packages("tidyverse")
library("tidyverse")}{
library("tidyverse")}}
checkpakages <- function(){
if(!require("tidyverse")){
install.packages("tidyverse")
library("tidyverse")}
library("tidyverse")}
checkpackages()
checkpackages <- function(){
if(!require("tidyverse")){
install.packages("tidyverse")
library("tidyverse")}
library("tidyverse")}
checkpackages()
?pmap
library("purrr")
?pmap
install.packages("gapminder")
ls("package:gapminder")
library("gapminder")
ls("package:gapminder")
gapminder
View(gapminder)
subset(gapminder,country=="Botswana")
library("tidyverse")
dat <- group_by(gapminder, country)
View(dat)
library("gapminder")
library("tidyverse")
?nest
by_country <- gapminder %>%
group_by(continent, country)%>%
nest()
by_country
str(by_country)
by_country$data[[1]]
?group_by
by_country$data[[2]]
length(by_country$data)
?nest
source('C:/Users/JAMESAZAM/GitRepositories/RProgrammingPractice/Scripts/purrr.R')
gapminder <- gapminder %>% mutate(year1950 = year - 1950)
source('C:/Users/JAMESAZAM/GitRepositories/RProgrammingPractice/Scripts/purrr.R')
head(by_country)
by_country$data[[1]]
by_country$country
